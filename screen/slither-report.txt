'solc --version' running
'solc @openzeppelin=tmp-deps/node_modules/@openzeppelin contracts/ethregistrar/ETHRegistrarController.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes --allow-paths .,/Users/sepehrsalami/ens-contracts/contracts/ethregistrar' running
Compilation warnings/errors on contracts/ethregistrar/ETHRegistrarController.sol:
Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contracts/ethregistrar/BaseRegistrarImplementation.sol

Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing "SPDX-License-Identifier: <SPDX-License>" to each source file. Use "SPDX-License-Identifier: UNLICENSED" for non-open-source code. Please see https://spdx.org for more information.
--> contracts/reverseRegistrar/IReverseRegistrar.sol

Warning: Function state mutability can be restricted to pure
   --> contracts/ethregistrar/BaseRegistrarImplementation.sol:177:5:
    |
177 |     function supportsInterface(
    |     ^ (Relevant source part starts here and spans across multiple lines).


INFO:Detectors:
ETHRegistrarController.withdraw() (contracts/ethregistrar/ETHRegistrarController.sol#375-377) sends eth to arbitrary user
	Dangerous calls:
	- address(owner()).transfer(address(this).balance) (contracts/ethregistrar/ETHRegistrarController.sol#376)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#functions-that-send-ether-to-arbitrary-destinations
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) has bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inverse = (3 * denominator) ^ 2 (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#117)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation
INFO:Detectors:
ERC20Recoverable.recoverFunds(address,address,uint256) (contracts/utils/ERC20Recoverable.sol#15-21) ignores return value by IERC20(_token).transfer(_to,_amount) (contracts/utils/ERC20Recoverable.sol#20)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unchecked-transfer
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse = (3 * denominator) ^ 2 (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#117)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#121)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#122)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#123)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#124)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#125)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- denominator = denominator / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#102)
	- inverse *= 2 - denominator * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#126)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) performs a multiplication on the result of a division:
	- prod0 = prod0 / twos (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#105)
	- result = prod0 * inverse (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#132)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
BaseRegistrarImplementation._register(uint256,address,uint256,bool) (contracts/ethregistrar/BaseRegistrarImplementation.sol#130-155) ignores return value by ens.setSubnodeOwner(baseNode,bytes32(id),owner) (contracts/ethregistrar/BaseRegistrarImplementation.sol#149)
BaseRegistrarImplementation.reclaim(uint256,address) (contracts/ethregistrar/BaseRegistrarImplementation.sol#172-175) ignores return value by ens.setSubnodeOwner(baseNode,bytes32(id),owner) (contracts/ethregistrar/BaseRegistrarImplementation.sol#174)
ETHRegistrarController.register(IETHRegistrarController.Registration) (contracts/ethregistrar/ETHRegistrarController.sol#247-345) ignores return value by Resolver(registration.resolver).multicallWithNodeCheck(namehash,registration.data) (contracts/ethregistrar/ETHRegistrarController.sol#308-311)
ETHRegistrarController.register(IETHRegistrarController.Registration) (contracts/ethregistrar/ETHRegistrarController.sol#247-345) ignores return value by reverseRegistrar.setNameForAddr(msg.sender,msg.sender,registration.resolver,string.concat(registration.label,.eth)) (contracts/ethregistrar/ETHRegistrarController.sol#320-325)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-return
INFO:Detectors:
BaseRegistrarImplementation._isApprovedOrOwner(address,uint256).owner (contracts/ethregistrar/BaseRegistrarImplementation.sol#46) shadows:
	- Ownable.owner() (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
BaseRegistrarImplementation.register(uint256,address,uint256).owner (contracts/ethregistrar/BaseRegistrarImplementation.sol#112) shadows:
	- Ownable.owner() (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
BaseRegistrarImplementation.registerOnly(uint256,address,uint256).owner (contracts/ethregistrar/BaseRegistrarImplementation.sol#124) shadows:
	- Ownable.owner() (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
BaseRegistrarImplementation._register(uint256,address,uint256,bool).owner (contracts/ethregistrar/BaseRegistrarImplementation.sol#132) shadows:
	- Ownable.owner() (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
BaseRegistrarImplementation.reclaim(uint256,address).owner (contracts/ethregistrar/BaseRegistrarImplementation.sol#172) shadows:
	- Ownable.owner() (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#43-45) (function)
ENS.setRecord(bytes32,address,address,uint64).owner (contracts/registry/ENS.sol#26) shadows:
	- ENS.owner(bytes32) (contracts/registry/ENS.sol#53) (function)
ENS.setRecord(bytes32,address,address,uint64).resolver (contracts/registry/ENS.sol#27) shadows:
	- ENS.resolver(bytes32) (contracts/registry/ENS.sol#55) (function)
ENS.setRecord(bytes32,address,address,uint64).ttl (contracts/registry/ENS.sol#28) shadows:
	- ENS.ttl(bytes32) (contracts/registry/ENS.sol#57) (function)
ENS.setSubnodeRecord(bytes32,bytes32,address,address,uint64).owner (contracts/registry/ENS.sol#34) shadows:
	- ENS.owner(bytes32) (contracts/registry/ENS.sol#53) (function)
ENS.setSubnodeRecord(bytes32,bytes32,address,address,uint64).resolver (contracts/registry/ENS.sol#35) shadows:
	- ENS.resolver(bytes32) (contracts/registry/ENS.sol#55) (function)
ENS.setSubnodeRecord(bytes32,bytes32,address,address,uint64).ttl (contracts/registry/ENS.sol#36) shadows:
	- ENS.ttl(bytes32) (contracts/registry/ENS.sol#57) (function)
ENS.setSubnodeOwner(bytes32,bytes32,address).owner (contracts/registry/ENS.sol#42) shadows:
	- ENS.owner(bytes32) (contracts/registry/ENS.sol#53) (function)
ENS.setResolver(bytes32,address).resolver (contracts/registry/ENS.sol#45) shadows:
	- ENS.resolver(bytes32) (contracts/registry/ENS.sol#55) (function)
ENS.setOwner(bytes32,address).owner (contracts/registry/ENS.sol#47) shadows:
	- ENS.owner(bytes32) (contracts/registry/ENS.sol#53) (function)
ENS.setTTL(bytes32,uint64).ttl (contracts/registry/ENS.sol#49) shadows:
	- ENS.ttl(bytes32) (contracts/registry/ENS.sol#57) (function)
ENS.isApprovedForAll(address,address).owner (contracts/registry/ENS.sol#62) shadows:
	- ENS.owner(bytes32) (contracts/registry/ENS.sol#53) (function)
Resolver.setAddr(bytes32,address).addr (contracts/resolvers/Resolver.sol#53) shadows:
	- IAddrResolver.addr(bytes32) (contracts/resolvers/profiles/IAddrResolver.sol#11) (function)
	- IAddressResolver.addr(bytes32,uint256) (contracts/resolvers/profiles/IAddressResolver.sol#12-15) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Reentrancy in BaseRegistrarImplementation._register(uint256,address,uint256,bool) (contracts/ethregistrar/BaseRegistrarImplementation.sol#130-155):
	External calls:
	- ens.setSubnodeOwner(baseNode,bytes32(id),owner) (contracts/ethregistrar/BaseRegistrarImplementation.sol#149)
	Event emitted after the call(s):
	- NameRegistered(id,owner,block.timestamp + duration) (contracts/ethregistrar/BaseRegistrarImplementation.sol#152)
Reentrancy in ETHRegistrarController.register(IETHRegistrarController.Registration) (contracts/ethregistrar/ETHRegistrarController.sol#247-345):
	External calls:
	- expires = base.register(uint256(labelhash),registration.owner,registration.duration) (contracts/ethregistrar/ETHRegistrarController.sol#288-292)
	- expires = base.register(uint256(labelhash),address(this),registration.duration) (contracts/ethregistrar/ETHRegistrarController.sol#294-298)
	- ens.setRecord(namehash,registration.owner,registration.resolver,0) (contracts/ethregistrar/ETHRegistrarController.sol#301-306)
	- Resolver(registration.resolver).multicallWithNodeCheck(namehash,registration.data) (contracts/ethregistrar/ETHRegistrarController.sol#308-311)
	- base.transferFrom(address(this),registration.owner,uint256(labelhash)) (contracts/ethregistrar/ETHRegistrarController.sol#313-317)
	- reverseRegistrar.setNameForAddr(msg.sender,msg.sender,registration.resolver,string.concat(registration.label,.eth)) (contracts/ethregistrar/ETHRegistrarController.sol#320-325)
	- defaultReverseRegistrar.setNameForAddr(msg.sender,string.concat(registration.label,.eth)) (contracts/ethregistrar/ETHRegistrarController.sol#327-330)
	Event emitted after the call(s):
	- NameRegistered(registration.label,labelhash,registration.owner,price.base,price.premium,expires,registration.referrer) (contracts/ethregistrar/ETHRegistrarController.sol#333-341)
Reentrancy in ETHRegistrarController.renew(string,uint256,bytes32) (contracts/ethregistrar/ETHRegistrarController.sol#352-372):
	External calls:
	- expires = base.renew(uint256(labelhash),duration) (contracts/ethregistrar/ETHRegistrarController.sol#366)
	Event emitted after the call(s):
	- NameRenewed(label,labelhash,price.base,expires,referrer) (contracts/ethregistrar/ETHRegistrarController.sol#368)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3
INFO:Detectors:
BaseRegistrarImplementation.ownerOf(uint256) (contracts/ethregistrar/BaseRegistrarImplementation.sol#71-76) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(expiries[tokenId] > block.timestamp) (contracts/ethregistrar/BaseRegistrarImplementation.sol#74)
BaseRegistrarImplementation.available(uint256) (contracts/ethregistrar/BaseRegistrarImplementation.sol#101-104) uses timestamp for comparisons
	Dangerous comparisons:
	- expiries[id] + GRACE_PERIOD < block.timestamp (contracts/ethregistrar/BaseRegistrarImplementation.sol#103)
BaseRegistrarImplementation._register(uint256,address,uint256,bool) (contracts/ethregistrar/BaseRegistrarImplementation.sol#130-155) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(block.timestamp + duration + GRACE_PERIOD > block.timestamp + GRACE_PERIOD) (contracts/ethregistrar/BaseRegistrarImplementation.sol#137-140)
BaseRegistrarImplementation.renew(uint256,uint256) (contracts/ethregistrar/BaseRegistrarImplementation.sol#157-169) uses timestamp for comparisons
	Dangerous comparisons:
	- require(bool)(expiries[id] + GRACE_PERIOD >= block.timestamp) (contracts/ethregistrar/BaseRegistrarImplementation.sol#161)
	- require(bool)(expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD) (contracts/ethregistrar/BaseRegistrarImplementation.sol#162-164)
ETHRegistrarController.constructor(BaseRegistrarImplementation,IPriceOracle,uint256,uint256,IReverseRegistrar,IDefaultReverseRegistrar,ENS) (contracts/ethregistrar/ETHRegistrarController.sol#150-172) uses timestamp for comparisons
	Dangerous comparisons:
	- _maxCommitmentAge > block.timestamp (contracts/ethregistrar/ETHRegistrarController.sol#162)
ETHRegistrarController.commit(bytes32) (contracts/ethregistrar/ETHRegistrarController.sol#230-235) uses timestamp for comparisons
	Dangerous comparisons:
	- commitments[commitment] + maxCommitmentAge >= block.timestamp (contracts/ethregistrar/ETHRegistrarController.sol#231)
ETHRegistrarController.register(IETHRegistrarController.Registration) (contracts/ethregistrar/ETHRegistrarController.sol#247-345) uses timestamp for comparisons
	Dangerous comparisons:
	- commitmentTimestamp + minCommitmentAge > block.timestamp (contracts/ethregistrar/ETHRegistrarController.sol#266)
	- commitmentTimestamp + maxCommitmentAge <= block.timestamp (contracts/ethregistrar/ETHRegistrarController.sol#274)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
ERC721._checkOnERC721Received(address,address,uint256,bytes) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#429-451) uses assembly
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#443-445)
Address._revert(bytes,string) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#231-243) uses assembly
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#236-239)
Strings.toString(uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Strings.sol#18-38) uses assembly
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/Strings.sol#24-26)
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/Strings.sol#30-32)
Math.mulDiv(uint256,uint256,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#55-135) uses assembly
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#66-70)
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#86-93)
	- INLINE ASM (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#100-109)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
6 different versions of Solidity are used:
	- Version constraint >=0.8.4 is used by:
		->=0.8.4 (contracts/ethregistrar/BaseRegistrarImplementation.sol#1)
		->=0.8.4 (contracts/registry/ENS.sol#2)
		->=0.8.4 (contracts/resolvers/Resolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IABIResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IAddrResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IAddressResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IContentHashResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IDNSRecordResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IDNSZoneResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IInterfaceResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/INameResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/IPubkeyResolver.sol#2)
		->=0.8.4 (contracts/resolvers/profiles/ITextResolver.sol#2)
		->=0.8.4 (contracts/reverseRegistrar/IReverseRegistrar.sol#1)
		->=0.8.4 (contracts/utils/StringUtils.sol#2)
	- Version constraint ~0.8.17 is used by:
		-~0.8.17 (contracts/ethregistrar/ETHRegistrarController.sol#2)
		-~0.8.17 (contracts/ethregistrar/IETHRegistrarController.sol#2)
	- Version constraint ^0.8.4 is used by:
		-^0.8.4 (contracts/ethregistrar/IBaseRegistrar.sol#2)
		-^0.8.4 (contracts/resolvers/profiles/IExtendedResolver.sol#2)
		-^0.8.4 (contracts/reverseRegistrar/IDefaultReverseRegistrar.sol#2)
	- Version constraint >=0.8.17<0.9.0 is used by:
		->=0.8.17<0.9.0 (contracts/ethregistrar/IPriceOracle.sol#2)
		->=0.8.17<0.9.0 (contracts/utils/ERC20Recoverable.sol#2)
	- Version constraint ^0.8.0 is used by:
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Context.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
		-^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- Version constraint ^0.8.1 is used by:
		-^0.8.1 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Context._msgData() (tmp-deps/node_modules/@openzeppelin/contracts/utils/Context.sol#21-23) is never used and should be removed
ERC721.__unsafe_increaseBalance(address,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#503-505) is never used and should be removed
ERC721._isApprovedOrOwner(address,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#239-242) is never used and should be removed
ERC721._safeMint(address,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#254-256) is never used and should be removed
ERC721._safeMint(address,uint256,bytes) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#262-272) is never used and should be removed
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#dead-code
INFO:Detectors:
Version constraint >=0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- >=0.8.4 (contracts/ethregistrar/BaseRegistrarImplementation.sol#1)
	- >=0.8.4 (contracts/registry/ENS.sol#2)
	- >=0.8.4 (contracts/resolvers/Resolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IABIResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IAddrResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IAddressResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IContentHashResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IDNSRecordResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IDNSZoneResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IInterfaceResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/INameResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/IPubkeyResolver.sol#2)
	- >=0.8.4 (contracts/resolvers/profiles/ITextResolver.sol#2)
	- >=0.8.4 (contracts/reverseRegistrar/IReverseRegistrar.sol#1)
	- >=0.8.4 (contracts/utils/StringUtils.sol#2)
Version constraint ~0.8.17 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ~0.8.17 (contracts/ethregistrar/ETHRegistrarController.sol#2)
	- ~0.8.17 (contracts/ethregistrar/IETHRegistrarController.sol#2)
Version constraint ^0.8.4 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables.
It is used by:
	- ^0.8.4 (contracts/ethregistrar/IBaseRegistrar.sol#2)
	- ^0.8.4 (contracts/resolvers/profiles/IExtendedResolver.sol#2)
	- ^0.8.4 (contracts/reverseRegistrar/IDefaultReverseRegistrar.sol#2)
Version constraint >=0.8.17<0.9.0 is too complex.
It is used by:
	- >=0.8.17<0.9.0 (contracts/ethregistrar/IPriceOracle.sol#2)
	- >=0.8.17<0.9.0 (contracts/utils/ERC20Recoverable.sol#2)
Version constraint ^0.8.0 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/introspection/ERC165.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol#4)
	- ^0.8.0 (tmp-deps/node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
Version constraint ^0.8.1 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess
	- AbiReencodingHeadOverflowWithStaticArrayCleanup
	- DirtyBytesArrayToStorage
	- DataLocationChangeInInternalOverride
	- NestedCalldataArrayAbiReencodingSizeValidation
	- SignedImmutables
	- ABIDecodeTwoDimensionalArrayMemory
	- KeccakCaching.
It is used by:
	- ^0.8.1 (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Low level call in Address.sendValue(address,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#60-65):
	- (success,None) = recipient.call{value: amount}() (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#63)
Low level call in Address.functionCallWithValue(address,bytes,uint256,string) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#128-137):
	- (success,returndata) = target.call{value: value}(data) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#135)
Low level call in Address.functionStaticCall(address,bytes,string) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#155-162):
	- (success,returndata) = target.staticcall(data) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#160)
Low level call in Address.functionDelegateCall(address,bytes,string) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#180-187):
	- (success,returndata) = target.delegatecall(data) (tmp-deps/node_modules/@openzeppelin/contracts/utils/Address.sol#185)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#low-level-calls
INFO:Detectors:
Function IABIResolver.ABI(bytes32,uint256) (contracts/resolvers/profiles/IABIResolver.sol#13-16) is not in mixedCase
Parameter ERC20Recoverable.recoverFunds(address,address,uint256)._token (contracts/utils/ERC20Recoverable.sol#16) is not in mixedCase
Parameter ERC20Recoverable.recoverFunds(address,address,uint256)._to (contracts/utils/ERC20Recoverable.sol#17) is not in mixedCase
Parameter ERC20Recoverable.recoverFunds(address,address,uint256)._amount (contracts/utils/ERC20Recoverable.sol#18) is not in mixedCase
Function ERC721.__unsafe_increaseBalance(address,uint256) (tmp-deps/node_modules/@openzeppelin/contracts/token/ERC721/ERC721.sol#503-505) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
ETHRegistrarController.MAX_EXPIRY (contracts/ethregistrar/ETHRegistrarController.sol#40) is never used in ETHRegistrarController (contracts/ethregistrar/ETHRegistrarController.sol#18-408)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#unused-state-variable
INFO:Detectors:
BaseRegistrarImplementation.baseNode (contracts/ethregistrar/BaseRegistrarImplementation.sol#14) should be immutable 
BaseRegistrarImplementation.ens (contracts/ethregistrar/BaseRegistrarImplementation.sol#12) should be immutable 
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-immutable
INFO:Slither:contracts/ethregistrar/ETHRegistrarController.sol analyzed (34 contracts with 100 detectors), 70 result(s) found
